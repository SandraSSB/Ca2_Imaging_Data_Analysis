# Raster plot representing Ca2+ events

import pandas as pd
import numpy as np
import plotly.graph_objects as go

# Load csv - INDICATE THE NAME OF THE FILE
df = pd.read_csv("XXXX.csv")

# Remove empty spaces in the title of columns
df.columns = df.columns.str.strip()

# Quantify events/cell and display in an increasing order
event_number = df['Cell Name'].value_counts().sort_values(ascending=False) # for decreasing order, change ascending=True
cell_names = event_number.index.tolist()

# Group events by cell
eventtimes = {cell_name: df.loc[df['Cell Name'] == cell_name, 'Time (s)'].values for cell_name in cell_names}

# Figure
fig = go.Figure()

# To add vertical lines by events
space = 1  # Separation between each cell, adjust it (1 = standard, 2 = double separation, etc.)
for idx, (cell_id, times) in enumerate(eventtimes.items()):
    y_pos = idx * space
    for t in times:
        fig.add_trace(go.Scatter(
            x=[t, t],
            y=[y_pos - 0.4, y_pos + 0.4],
            mode='lines',
            line=dict(color='white', width=1), # color events
            showlegend=False
        ))

# Axis configuration
pixels_by_cell = 12 # 10 is the default value
fig.update_layout(
    xaxis_title='Time (s)',
    yaxis_title='Cell #',
    xaxis=dict(
        color='white', # axis X color
        showline=False,    # remove line axis X
        zeroline=False,    # remove line y=0
        range=[0, 330] # adjust axis X for specific time range
    ),
    yaxis=dict(
        color='white', # axis Y color
        showline=False,    # remove line axis Y
        zeroline=False,    # remove line x=0
        tickmode='array',
        tickvals=[i * space for i in range(len(eventtimes))],
        ticktext=cell_names,
        range=[-1, len(cell_names) * space]        
    ),
    height=pixels_by_cell * len(cell_names),
    width=1000,
    plot_bgcolor='black', # graph background color
    paper_bgcolor='black', # outside graph background color
    font=dict(color='white'), # text color
)

fig.update_xaxes(showgrid=False, gridwidth=1, gridcolor='lightgray') # showgrid=False for removing background vertical lines
fig.update_yaxes(showgrid=False, gridwidth=1, gridcolor='lightgray') # showgrid=False for removing background horizontal lines

fig.show()

# Export graph in 'html' format
fig.write_html('./RasterPlot_XXX.html')

print("âœ… Graph done!")
